## 高可用设计
    1.请求生命周期
        DNS IP
        CDN 加速
        LVS 四层负载
        Nginx 七层负载
        gateway
        微服务
        存储/缓存
    2.入口高可用
        DNS： DNS提供商提供高可用
        LVS： 准备
            LVS + KeepAlived VIP
        Nginx：多台
    3.服务冗余部署
        防止单点故障
        服务注册发现
        连接管理
        负载均衡
        节点探活
        失效处理
    3.冗余存储
        主从部署，读写分离
            一主一从
            一主多从
            延时从 利用延时从恢复被误操作的数据
        主从切换
            主库挂了之后 从库直接提升为主库 主库恢复之后 主库再恢复过来
        新主库预热问题
            内存没有热数据：控制入口流量
        业务无感知
            使用VIP1主 VIP2从，当主出现问题时将VIP1指向VIP2，回复时将VIP2指向VIP1
        数据隔离
            不同业务模块使用不同数据库实例
    4.模块拆分
        网关 + 按照业务垂直拆分
        拆分原则
            职责单一，业务隔离，粒度合理

## 扩展性设计
    无状态设计

## 高性能设计
    CDN
        边缘节点加速
    业务逻辑优化
        使用合适的数据结构
        非必要耗时逻辑异步处理
    部署优化
        使用合理JVM参数
        增加服务逻辑
    存储性能优化
        使用缓存
            读多写少
            cache aside
        DB索引优化
        分库分表
            字段相关：取模
                其他字段映射：举例 手机号 会变的
                如果都是两个id都是自己生成 可以使用基因法 即两个id用于分表的bit保持一致： 举例商品

                冷热数据
                    如订单数据 可以采用定时归档的措施
            时间相关
                按时间范围拆分 
                    比如订单流水数据（所有流水）

## 服务治理
    过载保护
        服务方超时丢弃
    熔断降级
        返回失败降级
        调用方超时降级
        达到阈值熔断降级
    权重支持
        考虑到节点的性能差异
    日常维护
        监控
            发现系统异常
            平均响应
            TP99 TP95
        调用链
            查找问题方便
        服务分级
            提升质量意识
            业务重要程度分级

