CDN应用领域
    网络视频
    电商
    网游
    门户网站
一致性问题
    主动推送
        没有问题
        浪费流量
    被动拉取
        过期时间不一致
        解决方案
            最终一致 一致性要求不高的
            发布资源加版本号(hash) 要求高的
案例
    转转 dig

CDN高可用
    错峰分发 预热边缘节点
    客户端随机延迟一会在下载




            Nginx
                七层负载
                    通过报文中的内容进行负载
                组成
                    二进制文件
                    nginx.conf
                    access.log
                    errer.log
                设计
                    模块化
                        核心模块
                        HTTP模块
                        SSL模块
                        ...
                    事件驱动
                    多进程
                        Master
                            管理工作进程
                                监视状态
                                处理各种信号 通知worker
                                    reload/quit/stop
                        Wokrer
                            处理客户端请求
                            接收主进程的信号
                        Cache Loader
                            定时加载缓存
                        Cache Manager
                            管理缓存的进程
                                淘汰等
                    非阻塞
                进程通信
                    共享内存
                        虚拟内存指向一块物理内存
                        共享数据
                        流量控制
                    信号
                        Master到worker下发指令的
                优点
                    多Worker稳定性高 相互不影响
                    进程独立，减小锁开销
                
                请求处理流程
                    接收客户端请求
                    处理可读事件
                    发送请求头
                    发送包体
                    调用各个模块处理
                    请求真正的后端
                    缓存
                    响应
                主要模块配置
                    http {

                    }
                    server {

                    }
                参数调优
                    work process
                        核数
                    worker connections
                        客户端连接 + 服务端连接
                    sendfile 
                        零拷贝
                    keepalive_timeout
                        超时时间
                    accept_mutex
                        惊群问题
                优点
                    跨平台 
                    可压缩
                    占用资源小
                    性能高
                    容易使用
                缺点
                    只支持端口探测
                        刚启动容器超时
                        解决方案  
                            先挂起 再挂回
                操作
                    reload
                        给master 发信号
                        检查配置文件
                        监听新端口 如果有
                        启动新的worker
                        杀掉老的worker

                    https
                        从80重定向到443
                        过程



http {
    charset utf-8;
    keepalive_timeout 60;
    client_header_timeout  1m;
    client_body_timeout    1m;
    send_timeout           1m;
    client_max_body_size 50m;
    client_body_buffer_size 50m;
    proxy_connect_timeout 5;
    proxy_send_timeout 15;
    proxy_read_timeout 15;
    include ../conf.d/*.conf;
    include ../upstream.d/*.conf;
}

/root/blog/twomorehours.github.io



server {
    listen 80;
    server_name 106.12.15.56;
    charset utf-8;
    access_log logs/tmh.log main;
    error_log logs/tmh.log error;
    location /{
        alias /root/blog/twomorehours.github.io/;
        index index.html;
    }
}