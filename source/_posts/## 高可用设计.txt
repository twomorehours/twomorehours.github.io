CDN应用领域
    网络视频
    电商
    网游
    门户网站
一致性问题
    主动推送
        没有问题
        浪费流量
    被动拉取
        过期时间不一致
        解决方案
            最终一致 一致性要求不高的
            发布资源加版本号(hash) 要求高的
案例
    转转 dig

CDN高可用
    错峰分发 预热边缘节点
    客户端随机延迟一会在下载


正向代理
    代理客户端发送请求
    作用
        - 代理浏览器访问
        - 缓存访问资源
        - 客户端访问授权（限制访问资源）
        - 上网行为管理
        - 隐藏用户信息
    ngx正向代理搭建
        {
            resovler
            listen
            access_log
            error_log
            location /{
                proxy_pass $http_post$http_uri
            }
        }

反向代理
    代理服务端接收请求
    作用
        - 解决单机处理能力不足的问题，多台负载均衡
        - 保证内网安全（走https）
        - 缓存web请求
        - 代理隐藏目标
    搭建
        {
            server
            listen
            access_log
            error_log
            location /{
                proxy_pass upstream
            }
        }

    种类
        硬件
            F5：太贵
        软件
            LVS
                四层负载
                组成
                    ipvs 实现调度
                    ipvsadmin 后台配置
                概念
                    DS：Direct Server 负载均衡器
                    RS：Real Server 被代理的server
                    VIP： 虚IP 直接面向IP
                    DIP：Direct Server和RS通信的IP
                    RIP：RS的IP
                    CIP： 客户端的IP
                工作模式
                    DR
                        快
                        LVS将请求包MAC地址修改为RS的MAC地址，CIP保持不变 
                        RS处理完之后直接返回给CIP，RS感知不到LVS的存在
                    TUN 隧道
                        难用
                        LVS将请求添加上DIP到RIP
                        RS处理完之后直接返回给CIP
                    NAT/NAT-FULL
                        LVS是性能瓶颈
                        LVS将目的地址转为RIP
                        RIP处理完之后反给LVS
                        LVS再把目标替换为CIP 发给CIP
                负载算法
                    轮询
                    权重轮询
                    最小连接
                    权重最小连接 
                        最小连接1/权重1 <>  最小连接2/权重2 
                        最小连接1 * 权重2 <>  最小连接2 * 权重1
                    目标地址散列
                    源地址散列
                特点
                    高性能
                    省资源
                    高可靠
                    配置少 容易上手


            Nginx
                七层负载
                    通过报文中的内容进行负载
                组成
                    二进制文件
                    nginx.conf
                    access.log
                    errer.log
                设计
                    模块化
                        核心模块
                        HTTP模块
                        SSL模块
                        ...
                    事件驱动
                    多进程
                        Master
                            管理工作进程
                                监视状态
                                处理各种信号 通知worker
                                    reload/quit/stop
                        Wokrer
                            处理客户端请求
                            接收主进程的信号
                        Cache Loader
                            定时加载缓存
                        Cache Manager
                            管理缓存的进程
                                淘汰等
                    非阻塞
                进程通信
                    共享内存
                        虚拟内存指向一块物理内存
                        共享数据
                        流量控制
                    信号
                        Master到worker下发指令的
                优点
                    多Worker稳定性高 相互不影响
                    进程独立，减小锁开销
                
                请求处理流程
                    接收客户端请求
                    处理可读事件
                    发送请求头
                    发送包体
                    调用各个模块处理
                    请求真正的后端
                    缓存
                    响应
                主要模块配置
                    http {

                    }
                    server {

                    }
                参数调优
                    work process
                        核数
                    worker connections
                        客户端连接 + 服务端连接
                    sendfile 
                        零拷贝
                    keepalive_timeout
                        超时时间
                    accept_mutex
                        惊群问题
                优点
                    跨平台 
                    可压缩
                    占用资源小
                    性能高
                    容易使用
                缺点
                    只支持端口探测
                        刚启动容器超时
                        解决方案  
                            先挂起 再挂回
                操作
                    reload
                        给master 发信号
                        检查配置文件
                        监听新端口 如果有
                        启动新的worker
                        杀掉老的worker

                    https
                        从80重定向到443
                        过程
